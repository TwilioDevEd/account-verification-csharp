.chapter(data-title='Account Verification ASP.NET MVC')
  .step(data-title='Introduction', data-file='AccountVerification.Web/App_Start/IdentityConfig.cs')
    :markdown
      ## Introduction

      Ready to implement user account verification in your application? Here's how it works at a high level:

      1. The user begins the registration process by entering his/her data, including a mobile phone number, into a signup form

      1. The authentication system sends a verification code to the user's mobile phone to verify the possession of it

      1. The user enters the verification code into a verification form to complete the registration process

      1. The user then is redirected to a success page and receives an SMS indicating that the account has been successfully created

      ## Building Blocks

      To get this done, you'll be working with the following Twilio powered APIs:

      **Authy REST API**

      * [Authy](//docs.authy.com/): Find quick starts, documentation, and all about the helper libraries.

      **Twilio REST API**
      * [Twilio Messages](//www.twilio.com/docs/api/rest/sending-messages): We
      will use Twilio directly to send our user a confirmation message after they
      create an account

      Let's get started! Click the right arrow to move on to the next step of the tutorial.


  .step(data-title='User Management' data-file='AccountVerification.Web/Models/IdentityModels.cs' data-highlight="13-19")
    :markdown
      ## User Management

      This tutorial focuses on the user registration process so, we should
      probably mention the auth model. We'll be using use
      [ASP.NET.Identity](http://www.asp.net/identity), which is a relatively
      new membership system for building ASP.NET web apps and it provides you
      with some very powerful user and role managements features.

      In order to define ours **User** model we just have to subclass the one
      provided by ASP.NET Identity and specify what properties we want for it,
      which would be the `Name`, the `CountryCode` and the `AuthyUserId`, this
      one will be used to store the Authy token used to identify the user.
      Later in this tutorial we'll explain how to obtain it.

  .step(data-title='Registration form and UI' data-file='AccountVerification.Web/Views/Account/Register.cshtml'
        data-highlight="9-49" data-mode='html')
    :markdown
      ## Registration form and UI

      During the registration of a new user, we ask for a name, an E-mail address, and a password.
      In order to validate their account, we also ask them for a mobile number
      with a country code, which we can use with Authy to send the verification code
      via SMS.

      When we create a new ASP.NET Web Application, it includes the necessary `ASP.NET Identity` views,
      among those is the registration form. So, we just have to modify it to get it looking like we want.


  .step(data-title='Registration server side implementation' data-file='AccountVerification.Web/Controllers/AccountController.cs'
      data-highlight="152-191")
    :markdown
      ## Registration server side implementation

      It's now the controller's responsibility to verify that the user provides the required information to
      create a new user. If all goes good the controller should persist it in the database, registers the user under
      Authy's API and requests the send of the verification code to the user through the `RequestPhoneNumberConfirmationTokenAsync`
      method invocation, which will be explained a few sections ahead.

      The flow finalizes with the redirect of the user to the verification code page.

  .step(data-title='Verification form and UI' data-file='AccountVerification.Web/Views/Account/VerifyRegistrationCode.cshtml'
        data-mode='html')
    :markdown
      ## Verification form and UI

      As stated before, once the user completes the registration they get redirected to the verification page, which you may access
      at any time using the route `/Account/VerifyRegistrationCode`. This page consists of a simple form where you can input your
      account E-mail address, and verify the SMS verification code.

  .step(data-title='Verification server side implementation' data-file='AccountVerification.Web/Controllers/AccountController.cs'
        data-highlight='73-97')
    :markdown
      ## Verification server side implementation

      The server side implementation for the registration process confirmation ensures the given E-mail belongs to a previously registered user which hasn't
      performed the verification process yet.

      From this moment the process has two critical steps:
      1. It communicates with Authy's API to check that the given code is correct

      1. Once the code is verified with Authy we send a confirmation SMS to the user.

      1. Finally it redirects the user to a success page.

  .step(data-title='Twilio and Authy configuration' data-file='AccountVerification.Web/Web.config' data-highlight="19-22" data-mode='xml')
    :markdown
      ## Twilio and Authy configuration

      Before we move on let's take a quick look at some application configuration.

      You need to create a Local.config file under the `AccountVerification.Web` directory with the following content:
      ```
        <?xml version="1.0" encoding="utf-8"?>
        <appSettings>
          <add key="TwilioAccountSID" value="your_twilio_account_SID" />
          <add key="TwilioAuthToken" value="your_twilio_auth_token" />
          <add key="TwilioNumber" value="your_twilio_number" />
          <add key="AuthyKey" value="your_authy_key" />
        </appSettings>
      ```
      You can find these settings in your [Twlio Account Dashboard](/user/account) and your [Authy
      dashboard](https://dashboard.authy.com/signup).

      **See Also**
      * [The Twilio C# Helper Library](//www.twilio.com/docs/csharp/install)
      * [The Authy.Net Client](https://github.com/davidsulpy/authy-net-client)

  .step(data-title='Request verification code' data-file='AccountVerification.Web/App_Start/IdentityConfig.cs'
        data-highlight="132-154")
    :markdown
      ## Request verification code

      The ASP.NET Identity **UserManager** is the brain for all the user management related operation and where all our magic happens.

      In order to request a verification code, we extend the `ApplicationUserManager` by adding an `AuthyClient` instance. Additionally, we add a method to check that the user exists and has been registered with Authy. If they haven't, we call `RegisterUser` on the `AuthyClient` instance, and update the `AuthyUserId`.

      Finally, we call the `SendSms` with the `AuthyClient` which requires the user's
      `AuthyUserId` and a `true` value for the `force` parameter. This will send the verification code to the user and force it to be sent via SMS.

  .step(data-title='Verification code confirmation' data-file='AccountVerification.Web/App_Start/IdentityConfig.cs'
        data-highlight="113-129")
    :markdown
      ## Verification code confirmation

      In order to verify the code we just sent the user we add a `ConfirmPhoneNumberAsync` method to the `ApplicationUserManager` class. This method will call Authy API's `VerifyToken` method,
      which returns a `boolean` indicating if the code is correct.
      If so, the method updates the user stating that the user phone number has been confirmed.

      This method returns an `IdentityResult` object indicating the verification process's result. If positive, it will lead the controller
      to the second step of registration process confirmation.

  .step(data-title='Account confirmation notification' data-file='AccountVerification.Web/App_Start/IdentityConfig.cs'
        data-highlight="17-30")
    :markdown
      ## Account confirmation notification

      After we verify the code and log in the user, we need to send an success SMS. We can do this by adding some Twilio code to the `UserManager` class.

      Here we create a `TwilioRestClient` with our Twilio's preconfigured SID and Auth Token for
      sending an SMS to the messages's destination number. Next all we need to do is call [`twilio.sendMessage()`](//www.twilio.com/docs/api/rest/sending-messages#example-1) and we've sent an SMS to our verified and logged in user!

      **See Also**
      * [Sending SMS & MMS with Twilio C#](https://www.twilio.com/docs/api/rest/sending-messages#example-1)

  .step(data-title='Where to Next?')
    :markdown
      ## Where to Next?

      That's it! We've just implemented account verification. If you're a ASP.NET MVC developer working with Twilio,
      you might want to check out these other tutorials:

      [**SMS and MMS Notifications**](//www.twilio.com/docs/tutorials/walkthrough/server-notifications/csharp/mvc)

      Use Twilio to create sms server alerts so that you never miss a critical server issue.

      [**Apointment Reminders**](//www.twilio.com/docs/tutorials/walkthrough/appointment-reminders/csharp/mvc)

      Use Twilio to create automatic appointment reminders for your business users.

      ### Did this help?

      Thanks for checking out this tutorial! If you have any feedback to share
      with us, we'd love to hear it. Tweet
      [@twilio](http://twitter.com/twilio) to let us know what you think.
